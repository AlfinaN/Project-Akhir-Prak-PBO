/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project;

import java.util.Objects;

/**
 *
 * @author LENOVO
 */

public class menuCari extends javax.swing.JFrame {
    
    private Data[] hashArray;
    private int size = 150;
    
    public menuCari() {
        hashArray = new Data[size]; 
        initComponents();
        this.setLocationRelativeTo(null);
    }
    
    
    public void insert(String key,String value) 
    {
        Data item = new Data(key, value);
        key = item.getKey();
        int hashval = hashFunc(key);
        while(hashArray[hashval] != null){
            ++hashval;
            hashval %= size;
        }
        hashArray[hashval] = item;
    } 
    
    public boolean containsKey(String key)
    {
        int hashVal=hashFunc(key);
        while(hashArray[hashVal] != null){
            if (hashArray[hashVal].getKey().equalsIgnoreCase(key)) {
                return true;
            }
            ++hashVal;
            hashVal %= size;
        }
        return false;
    }
    
    public String get(String key) {
       
        int hashVal=hashFunc(key);
        while(hashArray[hashVal] != null){
            if (hashArray[hashVal].getKey().equalsIgnoreCase(key)) {
                return hashArray[hashVal].getValue();
            }
            ++hashVal;
            hashVal %= size;
        }
        return null;
    }
 
    public int hashFunc(String key)
    {  
        int index = key.hashCode();
        return Math.abs(index) % hashArray.length;
    }
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtCari = new javax.swing.JTextField();
        btBahasa = new javax.swing.JButton();
        btInformasi = new javax.swing.JButton();
        btExit = new javax.swing.JButton();
        btDaftarKata = new javax.swing.JButton();
        btHapus = new javax.swing.JButton();
        btCariBawah2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtCari.setFont(new java.awt.Font("Segoe UI Historic", 0, 18)); // NOI18N
        txtCari.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        txtCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCariActionPerformed(evt);
            }
        });
        getContentPane().add(txtCari, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 90, 350, 30));

        btBahasa.setContentAreaFilled(false);
        btBahasa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBahasaActionPerformed(evt);
            }
        });
        getContentPane().add(btBahasa, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 20, 90, 40));

        btInformasi.setContentAreaFilled(false);
        btInformasi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btInformasiActionPerformed(evt);
            }
        });
        getContentPane().add(btInformasi, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 20, 100, 40));

        btExit.setContentAreaFilled(false);
        btExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExitActionPerformed(evt);
            }
        });
        getContentPane().add(btExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 20, 90, 40));

        btDaftarKata.setFont(new java.awt.Font("Segoe UI Historic", 0, 14)); // NOI18N
        btDaftarKata.setContentAreaFilled(false);
        btDaftarKata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDaftarKataActionPerformed(evt);
            }
        });
        getContentPane().add(btDaftarKata, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 20, 130, 40));

        btHapus.setContentAreaFilled(false);
        btHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btHapusActionPerformed(evt);
            }
        });
        getContentPane().add(btHapus, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 90, 50, 40));

        btCariBawah2.setContentAreaFilled(false);
        btCariBawah2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCariBawah2ActionPerformed(evt);
            }
        });
        getContentPane().add(btCariBawah2, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 80, 50, 50));

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setBorder(null);

        txtArea.setColumns(20);
        txtArea.setFont(new java.awt.Font("Segoe UI Historic", 0, 18)); // NOI18N
        txtArea.setRows(5);
        jScrollPane1.setViewportView(txtArea);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 160, 450, 280));

        background.setBackground(new java.awt.Color(255, 255, 255));
        background.setFont(new java.awt.Font("Segoe UI Historic", 0, 14)); // NOI18N
        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Cari IDN.png"))); // NOI18N
        getContentPane().add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 850, 480));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCariActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCariActionPerformed

    private void btExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btExitActionPerformed

    private void btInformasiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btInformasiActionPerformed
        // TODO add your handling code here:
        new Informasi().setVisible(true);
        dispose();
    }//GEN-LAST:event_btInformasiActionPerformed

    private void btDaftarKataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDaftarKataActionPerformed
        // TODO add your handling code here:
        new DaftarKata().setVisible(true);
        dispose();
    }//GEN-LAST:event_btDaftarKataActionPerformed

    private void btHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btHapusActionPerformed
        // TODO add your handling code here:
        txtCari.setText("");
        txtArea.setText("");
    }//GEN-LAST:event_btHapusActionPerformed

    private void btBahasaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBahasaActionPerformed
        // TODO add your handling code here:
        new menuCari_ENG().setVisible(true);
        dispose();
    }//GEN-LAST:event_btBahasaActionPerformed

    private void btCariBawah2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCariBawah2ActionPerformed
        // TODO add your handling code here:
        String key = txtCari.getText();
        menuCari in = new menuCari();
        
        in.insert("abstrak class", "kelas murni (tanpa objek) dan tidak boleh memiliki\nobjek (tidak boleh ada instansiasi) serta \nmethod-method yang abstract harus disempurnakan \noleh kelas turunannya melalui override");
        in.insert("AI", "Artificial Intelligence yaitu Ilmu yang mengembangkan\nkomputer supaya dapat bekerja dan berpikir serta\nmengambil keputusan seperti layaknya manusia");
        in.insert("algoritma", "merupakan sebuah kumpulan perintah atau langkah-langkah\nyang di gunakan oleh programer untuk \nmenjalankan sebuah perintah");
        in.insert("ALU", "Arithmetic and Logical Unit yaitu bagian dari CPU yang berguna\nuntuk memproses data secara logika dan juga \ndata-data yang memerlukan perhitungan");
        in.insert("API", "API atau Application Programming Interface adalah sebuah sistem\natau protokol dan tool yang membanungun aplikasi \nperangkat lunak yang berjalan di balik layar");
        in.insert("argumen", "sebutan untuk nilai inputan fungsi pada saat suatu\nfungsi dipanggil");
        in.insert("array", "sebuah variabel yang bisa menyimpan banyak data dalam satu\nvariabel");
        in.insert("array multidimensi", "sebuah variabel yang menyimpan sekumpulan data\nyang memiliki tipe sama dan elemen yang akan \ndiakses melalui banyak indeks atau subskrip");
        in.insert("ascending", "urutan data yang tersusun dari yang\nterendah sampai tertinggi");
        in.insert("atribut", "data yang terdapat dalam sebuah class");
        in.insert("Back-End Developer", "programer yang bertanggung jawab untuk mengurus\nsisi bagian belakang atau “sisi server” karena \nberjalan di server situs web dan bukan di \nkomputer pengguna");
        in.insert("bahasa pemrograman", "Instruksi standar untuk memerintah komputer");
        in.insert("bahasa program", "Sekumpulan instruksi yang diberikan kepada komputer\nuntuk dapat melaksanakan tugas-tugas tertentu\ndalam menyelesaikan suatu permasalahan");
        in.insert("behaviour", "hal-hal yang bisa dilakukan oleh objek dari \nsuatu class");
        in.insert("binary tree", "sebuah pohon struktur data dimana setiap \nsimpulnya memiliki maksimal dua anak");
        in.insert("bit", "ukuran terkecil dari informasi");
        in.insert("boolean", "suatu data yang memiliki dua nilai yaitu \nTrue dan False, namun bila di terjemahkan ke dalam \nbentuk integer (pemograman) memiliki nilai \n1 untuk true 0 untuk false");
        in.insert("break", "perintah untuk menghentikan jalannya program");
        in.insert("browser", "software untuk membuka halaman website");
        in.insert("bubble sort", "metode pengurutan algoritma dengan cara melakukan\npenukaran data secara terus menerus sampai bisa \ndipastikan dalam suatu iterasi tertentu tidak ada lagi \nperubahan/penukaran. Algoritma ini menggunakan \nperbandingan dalam operasi antar elemennya");
        in.insert("char", "tipe data karakter tunggal yang biasa didefinisikan\ndengan tanda petik (‘) di awal dan di akhir \nkarakternya");
        in.insert("class", "Cetak biru atau blueprint dari object yang \ndigunakan hanya untuk membuat kerangka dasar");
        in.insert("client", "komputer yang bertugas menerima data dan informasi\nyang telah diolah oleh server");
        in.insert("coding", "penulisan program");
        in.insert("compare", "Membandingkan dan Memilih");
        in.insert("compute", "Melakukan perhitungan aritmetik");
        in.insert("connect", "menghubungkan komputer ke jaringan");
        in.insert("data", "kumpulan fakta yang mewakili suatu objek");
        in.insert("database", "sekumpulan data atau informasi elekstronik yang \nsudah disusun sedemikan rupa di dalam web server dengan ketentuan atau aturan tertentu yang saling berelasi");
        in.insert("delete", "menghapus data");
        in.insert("descending", "urutan data dari nilai tertinggi hingga terendah");
        in.insert("display", "hasil keluaran dari komputer");
        in.insert("domain", "alamat di internet atau sebagai penunjuk negara \nsitus web yang digunakan ");
        in.insert("double", "tipe double memiliki tingkat ketelitian secara ganda\natau double precision dengan menggunakan ruang \npenyimpanan 64-bit dalam menyimpan nilainya");
        in.insert("encode", "mempersiapkan suatu program ke dalam bahasa mesin \nagar segera diproses oleh komputer");
        in.insert("enkapsulasi", "konsep tentang pengikatan data atau metode berbeda \nyang disatukan atau “dikapsulkan” menjadi satu unit data");
        in.insert("error", "menunjukkan bahwa terdapat suatu kesalahan \ndalam kode program");
        in.insert("field", "kumpulan karakter yang membentuk suatu arti");
        in.insert("FIFO", "merupakan singkatan dari First In First Out, artinya \nadalah data yang pertama kali dimasukkan atau \ndisimpan, maka data tersebut adalah yang pertama \nkali akan diakses atau dikeluarkan");
        in.insert("float", "digunakan untuk menandai nilai yang presisi \nseperti ketelitian tunggal (single precision) dengan \nmenggunakan penyimpanan 32-bit");
        in.insert("flowchart", "Flowchart atau bagan alur adalah diagram yang \nmenampilkan langkah-langkah dan keputusan untuk \nmelakukan sebuah proses dari suatu program");
        in.insert("Front-End Developer", "programer yang bertanggung jawab untuk mengurus \nsisi bagian depan untuk menyesuaikan tampilan, \nnuansa, perilaku situs web, hingga antar muka pengguna\nyang meliputi mepilihan warna, font, hingga \nbentuk dropdown");
        in.insert("Full Stack Developer", "bekerja di zona abu-abu dimana dapat bekerja \nlintas-fungsional pada dua teknologi yang berbeda, \nyaitu front-end dan back-end, dan Full-Stack Developer \nmenawarkan sebuah paket yang lengkap");
        in.insert("graph", "kumpulan dari simpul dan busur yang saling \nterhubung");
        in.insert("gui", "tampilan antarmuka grafis yang memiliki elemen window, \nicon, dan menu. Windows memiliki sejumlah \nbagian, dari desktop hingga taskbar");
        in.insert("hash table", "struktur data yang digunakan dalam penyimpanan data \nsementara dan dapat mempercepat pencarian \ndata yang tersimpan");
        in.insert("heaps", "sebuah binary tree yang memiliki karateristik: \nbinary tree pada heap adalah tree yang complete, \ndiimplementasikan sebagai sebuah array daripada \nmenggunakan reference untuk menghubungkan tiap \nnode, dan node pada sebuah heap memenuhi \nkondisi/syarat heap	");
        in.insert("homepage", "halaman utama dari suatu website");
        in.insert("HTML", "HTML adalah singkatan dari Hypertext Markup Language,\nyaitu bahasa markup standar untuk membuat \ndan menyusun halaman dan aplikasi web");
        in.insert("infix", "cara penulisan ungkapan dengan meletakkan operator \ndi antara dua operand disertai tanda kurung");
        in.insert("inheritence", "kemampuan untuk membentuk class baru yang memiliki fungsi \nturunan atau mirip dengan fungsi yang ada sebelumnya");
        in.insert("input", "Membaca data");
        in.insert("insert", "memasukkan data");
        in.insert("insertion sort", "sebuah algoritma pengurutan yang membandingkan dua \nelemen data pertama, mengurutkannya, kemudian mengecek elemen \ndata berikutnya satu persatu dan membandingkannya \ndengan elemen data yang telah diurutkan. Karena \nalgoritma ini bekerja dengan membandingkan \nelemen-elemen data yang akan diurutkan, algoritma \nini termasuk pula dalam comparison-based sort");
        in.insert("instance", "pembentukan dari class menjadi object dikenal");
        in.insert("integer", "tipe data numerik yang biasa digunakan apabila \nbertemu dengan bilangan bulat");
        in.insert("IP", "Internet Protocol yaitu protokol yang beroperasi \ndalam bagian yang berbeda");
        in.insert("ISP", "Internet Server Provider yaitu perusahaan yang \nmenjual koneksi internet kepada pelanggan");
        in.insert("iterasi", "suatu urutan atau lebih dari langkah algoritmik \ndilakukan di loop program");
        in.insert("JavaScript", "suatu bahasa pemrograman yang bersifat Client Side \nProgramming Language yang dapat berjalan pada \nsemua web browser");
        in.insert("jQuery", "kumpulan fungsi-fungsi JavaScript yang memudahkan\npenulisan kode JavaScript atau sebuah library \nJavaScript");
        in.insert("LED", "lampu kecil yang digunakan untuk penanda \natau pointer");
        in.insert("LIFO", "merupakan singkatan dari Last In First Out, \nartinya adalah data yang terakhir kali dimasukkan \natau disimpan, maka data tersebut adalah yang \npertama kali akan diakses atau dikeluarkan");
        in.insert("linked list", "salah satu bentuk struktur data, berisi \nkumpulan data (node) yang tersusun secara \nsekuensial, saling sambung-menyambung, dinamis\n dan tidak terbatas");
        in.insert("long", "digunakan saat nilainya berada di luar\nkapasitas rentang tipe int karena tipe long\npunya range sangat tinggi dibanding tipe \ndata lainnya");
        in.insert("loop", "Melakukan pengulangan");
        in.insert("merge sort", "mengurutkan data dengan cara menggabungkan \nhingga data terurut");
        in.insert("method", "fungsi yang berisi tindakan yang bisa \ndilakukan di dalam class");
        in.insert("objek", "hasil cetak dari class");
        in.insert("oop", "OOP (Object Oriented Programming) adalah suatu \nmetode pemrograman yang berorientasi kepada \nobjek");
        in.insert("operator", "suatu simbol yang digunakan untuk memberikan \nperintah kepada komputer untuk melakukan aksi \nterhadap satu atau lebih operand. \nOperand sendiri adalah sesuatu yang \ndioperasikan oleh operator");
        in.insert("output", "Menampilkan data");
        in.insert("overloading", "membuat beberapa method dengan nama yang sama, \ntapi dibedakan dari jumlah dan/atau tipe \nparameter");
        in.insert("package", "direktori untuk menyimpan file bytecode \n(file berekstensi .class)");
        in.insert("parameter", "sebutan untuk nilai inputan fungsi pada saat \nsuatu fungsi itu di definisikan");
        in.insert("peek", "berfungsi untuk melihat data yang ada \npada tumpukan");
        in.insert("polimorfisme", "konsep di mana suatu objek yang berbeda-beda \ndapat diakses melalui interface yang sama atau \nistilah lain penerapan method yang sama \ntetapi menghasilkan perilaku yang berbeda");
        in.insert("pop", "berfungsi untuk mengeluarkan atau menghapus \nnilai terakhir (yang berada pada posisi \npaling atas) dari stack");
        in.insert("postfix", "cara penulisan ungkapan dengan meletakkan operator \nsetelah operand tanpa menuliskan tanda kurung ");
        in.insert("pseudocode", "code yang menggambarkan algoritma yang ditulis \ndengan lebih sederhana dan lebih bebas karena \ntidak terikat pada bahasa pemrograman \ntertentu");
        in.insert("push", "berfungsi untuk memasukkan sebuah nilai atau \ndata ke dalam stack dan queue");
        in.insert("queues", "merupakan struktur data linear dimana penambahan \nkomponen dilakukan disatu ujung, sementara \npengurangan dilakukan diujung lain");
        in.insert("quick sort", "mengurutkan data dengan membagi data menjadi \npartisi-partisi dan menggunakan pivot");
        in.insert("RAM", "suatu perangkat keras komputer yang berbentuk \nmodul memory yang berfungsi untuk menyimpan \ndata sementara");
        in.insert("rekursi", "method yang memanggil dirinya sendiri");
        in.insert("remove", "menghapus data yang sudah ada pada array \natau list");
        in.insert("return", "kata kunci untuk pengembalian nilai pada \nsuatu fungsi");
        in.insert("selection sort", "merupakan salah satu algoritma pengurutan \nyang sederhana. Ide dasarnya adalah melakukan \nbeberapa kali pass untuk melakukan penyeleksian \nelemen struktur data. Untuk sorting ascending \n(menaik), elemen yang paling kecil di antara\nelemen-elemen yang belum urut, disimpan indeksnya, \nkemudian dilakukan pertukaran nilai elemen \ndengan indeks yang disimpan tersebut dengan \nelemen yang paling depan yang belum urut");
        in.insert("sequence", "merupakan urutan pengerjaan dari perintah\n/statement pertama sampai dengan perintah\n/statement terakhir");
        in.insert("shell sort", "mengurutkan data dengan membandingkan suatu \ndata dengan data lain yang memiliki \njarak tertentu ");
        in.insert("sorting object", "mengurutkan suatu object menjadi data \nyang urut");
        in.insert("stacks", "tumpukan dapat diartikan sebagai suatu \nkumpulan data yang seolah-olah terlihat \nseperti ada data yang diletakkan di atas \ndata yang lain");
        in.insert("store", "Memberikan nilai ke suatu identifier");
        in.insert("string", "tipe data yang menampung kumpulan karakter \nyang harus berada di dalam tanda kutip \ndua ( ” )");
        in.insert("subclass", "class yang diwarisi sifat-sifat dari superclass");
        in.insert("superclass", "class yang mewariskan atribut dan methodnya \nke subclass");
        in.insert("teknik informatika", "Salah satu jurusan pendidikan tingkat perguruan \ntinggi yang mempelajari serta menerapkan \nprinsip-prinsip ilmu komputer dan analisis \nmatematis dalam perancangan, pengujian, pengembangan, \ndan evaluasi sistem operasi, perangkat lunak \n(software), dan kinerja komputer");
        in.insert("update", "memperbarui data yang sudah ada");
        in.insert("URL", "Uniform Resource Locator yaitu cara penanaman \nalamat file di internet");
        in.insert("website", "kumpulan halaman pada satu domain di internet \nyang dapat diakses menggunakan browser");
        
        if (in.containsKey(key)) {  
            txtArea.setText(in.get(key)); 
        } else { 
            txtArea.setText("Kata tidak ditemukan"); 
        }
        
    }//GEN-LAST:event_btCariBawah2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(menuCari.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(menuCari.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(menuCari.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(menuCari.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new menuCari().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel background;
    private javax.swing.JButton btBahasa;
    private javax.swing.JButton btCariBawah2;
    private javax.swing.JButton btDaftarKata;
    private javax.swing.JButton btExit;
    private javax.swing.JButton btHapus;
    private javax.swing.JButton btInformasi;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtArea;
    private javax.swing.JTextField txtCari;
    // End of variables declaration//GEN-END:variables
}
